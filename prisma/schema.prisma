// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String   @unique
  password    String
  role        Role     @default(USER)
  phoneNumber Int?     @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  orders       Order[]
  transactions Transaction[]
  farmer       Farmer?
}

model Product {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  price       Float
  unit        String
  stock       Int
  isOrganic   Boolean @default(true)
  farmerId    String  @db.ObjectId

  farmer     Farmer      @relation(fields: [farmerId], references: [id])
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  orderItems OrderItem[]
}

model Farmer {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  userId   String  @unique @db.ObjectId
  bio      String?
  location String?

  user      User       @relation(fields: [userId], references: [id])
  farmPlots FarmPlot[]
  products  Product[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
}

model FarmPlot {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  farmerId    String  @db.ObjectId
  name        String
  sizeInAcres Float
  cropType    String
  certified   Boolean @default(false)

  farmer    Farmer   @relation(fields: [farmerId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Order {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  userId      String      @db.ObjectId
  totalAmount Float
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())

  user         User          @relation(fields: [userId], references: [id])
  orderItems   OrderItem[]
  transactions Transaction[]
}

model OrderItem {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String @db.ObjectId
  productId String @db.ObjectId
  quantity  Int
  price     Float

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Transaction {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  userId    String        @db.ObjectId
  orderId   String        @db.ObjectId
  amount    Float
  status    PaymentStatus @default(PENDING)
  createdAt DateTime      @default(now())

  user  User  @relation(fields: [userId], references: [id])
  order Order @relation(fields: [orderId], references: [id])
}

enum Role {
  ADMIN
  FARMER
  USER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}
